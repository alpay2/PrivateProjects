import java.util.ArrayList;

import components.map.Map;
import components.map.Map1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Put a short phrase describing the program here.
 *
 * @author Aytekin Alpay
 *
 */
public final class Playoffs {

    public static Set<String> westTeams() {
        Set<String> teams = new Set1L<>();
        teams.add("Oklahoma City Thunder");
        teams.add("Los Angeles Lakers");
        teams.add("Sacramento Kings");
        teams.add("Houston Rockets");
        teams.add("Utah Jazz");
        teams.add("San Antonio Spurs");
        teams.add("Phoenix Suns");
        teams.add("Minnesota Timberwolves");
        teams.add("Memphis Grizzlies");
        teams.add("Dallas Mavericks");
        teams.add("Los Angeles Clippers");
        teams.add("Golden State Warriors");
        teams.add("Portland Trail Blazers");
        teams.add("New Orleans Pelicans");
        teams.add("Denver Nuggets");
        return teams;
    }

    public static Map<Integer, String> chooseWestSeeds(Set<String> teams,
            SimpleReader in, SimpleWriter out) {
        Map<Integer, String> west = new Map1L<>();

        for (int i = 1; i <= 8; i++) {
            out.println("Which team is seed #" + i + " in the West?");
            String team = in.nextLine();
            while (!teams.contains(team)) {
                out.println("Not a team in the Western Conference");
                out.println("Which team is seed #" + i + " in the West?");

                String team2 = in.nextLine();
                team = team2;
            }
            while (west.hasValue(team)) {
                out.println("Already chosen team in playoffs");
                out.println("Which team is seed #" + i + " in the West?");
                String team3 = in.nextLine();
                team = team3;
            }
            west.add(i, team);
        }

        return west;
    }

    public static Map<Integer, String> autoWestSeeds(Set<String> teams) {
        Map<Integer, String> seeds = new Map1L<>();
        for (int i = 1; i <= 8; i++) {
            seeds.add(i, teams.removeAny());
        }
        return seeds;
    }

    public static Set<String> eastTeams() {
        Set<String> teams = new Set1L<>();
        teams.add("Cleveland Cavaliers");
        teams.add("Washington Wizards");
        teams.add("Atlanta Hawks");
        teams.add("Miami Heat");
        teams.add("New York Knicks");
        teams.add("Chicago Bulls");
        teams.add("Brooklyn Nets");
        teams.add("Indiana Pacers");
        teams.add("Boston Celtics");
        teams.add("Orlando Magic");
        teams.add("Charlotte Hornets");
        teams.add("Philadelphia 76ers");
        teams.add("Detroit Pistons");
        teams.add("Milwaukee Bucks");
        teams.add("Toronto Raptors");
        return teams;
    }

    public static Map<Integer, String> chooseEastSeeds(Set<String> teams,
            SimpleReader in, SimpleWriter out) {
        Map<Integer, String> east = new Map1L<>();
        for (int i = 1; i <= 8; i++) {
            out.println("Which team is seed #" + i + " in the East?");
            String team = in.nextLine();
            while (!teams.contains(team)) {
                out.println("Not a team in the Eastern Conference");
                out.println("Which team is seed #" + i + " in the East?");
                String team2 = in.nextLine();
                team = team2;
            }
            while (east.hasValue(team)) {
                out.println("Already chosen team in playoffs");
                out.println("Which team is seed #" + i + " in the East?");
                String team2 = in.nextLine();
                team = team2;
            }
            east.add(i, team);
        }
        return east;
    }

    public static Map<Integer, String> autoEastSeeds(Set<String> teams) {
        Map<Integer, String> seeds = new Map1L<>();
        for (int i = 1; i <= 8; i++) {
            seeds.add(i, teams.removeAny());
        }
        return seeds;
    }

    public static int parser(String intg, SimpleReader in, SimpleWriter out) {
        for (int a = 0; a < intg.length(); a++) {
            while (!(intg.charAt(a) == '1') && !(intg.charAt(a) == '2')
                    && !(intg.charAt(a) == '3') && !(intg.charAt(a) == '4')
                    && !(intg.charAt(a) == '5') && !(intg.charAt(a) == '6')
                    && !(intg.charAt(a) == '7') && !(intg.charAt(a) == '8')
                    && !(intg.charAt(a) == '9') && !(intg.charAt(a) == '0')) {
                out.println(
                        "Not a valid score. Must be a whole positive number: ");
                String redo = in.nextLine();
                intg = redo;
            }
        }

        return Integer.parseInt(intg);
    }

    public static int series(int i, int lower, String homeT, String awayT,
            SimpleWriter out, SimpleReader in) {
        int team1Wins = 0;
        int team2Wins = 0;
        int games = 1;

        while (team2Wins != 4 && team1Wins != 4) {

            if (games == 1 || games == 2) {
                out.println("Game " + games + ": #" + lower + " " + awayT
                        + " @ #" + i + " " + homeT);
                out.print(awayT + ": ");
                int team2Score = 0;
                String team2S = in.nextLine();
                team2Score = parser(team2S, in, out);
                out.println();
                out.print(homeT + ": ");
                int team1Score = 0;
                String team1S = in.nextLine();
                team1Score = parser(team1S, in, out);

                while (team2Score == team1Score) {
                    out.println("Cannot end in tie");
                    out.println("Game " + games + ": #" + lower + " " + awayT
                            + " @ #" + i + " " + homeT);
                    out.print(awayT + ": ");
                    team2S = in.nextLine();
                    team2Score = parser(team2S, in, out);
                    out.println();
                    out.print(homeT + ": ");
                    team1S = in.nextLine();
                    team1Score = parser(team1S, in, out);
                }
                if (team2Score > team1Score) {
                    team2Wins++;
                } else if (team1Score > team2Score) {
                    team1Wins++;
                }
                out.println();
                out.println(homeT + " " + team1Wins);
                out.println(awayT + " " + team2Wins);
                out.println();
                games++;

            }
            if (games == 3 || games == 4) {
                out.println();
                out.println("Game " + games + ": #" + i + " " + homeT + " @ #"
                        + lower + " " + awayT);
                out.print(homeT + ": ");
                int team1Score = 0;
                String team1S = in.nextLine();
                team1Score = parser(team1S, in, out);
                out.println();
                out.print(awayT + ": ");
                int team2Score = 0;
                String team2S = in.nextLine();
                team2Score = parser(team2S, in, out);

                while (team2Score == team1Score) {
                    out.println("Cannot end in tie");
                    out.println("Game " + games + ": #" + i + " " + homeT
                            + " @ #" + lower + " " + awayT);
                    out.print(homeT + ": ");
                    team1S = in.nextLine();
                    team1Score = parser(team1S, in, out);
                    out.println();
                    out.print(awayT + ": ");
                    team2S = in.nextLine();
                    team2Score = parser(team2S, in, out);
                }
                if (team2Score > team1Score) {
                    team2Wins++;
                } else if (team1Score > team2Score) {
                    team1Wins++;
                }
                out.println();
                out.println(homeT + " " + team1Wins);
                out.println(awayT + " " + team2Wins);
                games++;
            }
            if (team1Wins == 4 || team2Wins == 4) {
                games = 8;
            }
            if (games == 5) {
                out.println();
                out.println("Game " + games + ": #" + lower + " " + awayT
                        + " @ #" + i + " " + homeT);
                out.print(awayT + ": ");
                int team2Score = 0;
                String team2S = in.nextLine();
                team2Score = parser(team2S, in, out);
                out.println();
                out.print(homeT + ": ");
                int team1Score = 0;
                String team1S = in.nextLine();
                team1Score = parser(team1S, in, out);

                while (team2Score == team1Score) {
                    out.println("Cannot end in tie");
                    out.println("Game " + games + ": #" + lower + " " + awayT
                            + " @ #" + i + " " + homeT);
                    out.print(awayT + ": ");
                    team2S = in.nextLine();
                    team2Score = parser(team2S, in, out);
                    out.println();
                    out.print(homeT + ": ");
                    team1S = in.nextLine();
                    team1Score = parser(team1S, in, out);
                }
                if (team2Score > team1Score) {
                    team2Wins++;
                } else if (team1Score > team2Score) {
                    team1Wins++;
                }
                out.println();
                out.println(homeT + " " + team1Wins);
                out.println(awayT + " " + team2Wins);
                games++;

            }
            if (team1Wins == 4 || team2Wins == 4) {
                games = 8;
            }
            if (games == 6) {
                out.println();
                out.println("Game " + games + ": #" + i + " " + homeT + " @ #"
                        + lower + " " + awayT);
                out.print(homeT + ": ");
                int team1Score = 0;
                String team1S = in.nextLine();
                team1Score = parser(team1S, in, out);
                out.println();
                out.print(awayT + ": ");
                int team2Score = 0;
                String team2S = in.nextLine();
                team2Score = parser(team2S, in, out);

                while (team2Score == team1Score) {
                    out.println("Cannot end in tie");
                    out.println("Game " + games + ": #" + i + " " + homeT
                            + " @ #" + lower + " " + awayT);
                    out.print(homeT + ": ");
                    team1S = in.nextLine();
                    team1Score = parser(team1S, in, out);
                    out.println();
                    out.print(awayT + ": ");
                    team2S = in.nextLine();
                    team2Score = parser(team2S, in, out);
                }
                if (team2Score > team1Score) {
                    team2Wins++;
                } else if (team1Score > team2Score) {
                    team1Wins++;
                }
                out.println();
                out.println(homeT + " " + team1Wins);
                out.println(awayT + " " + team2Wins);
                games++;
            }
            if (team1Wins == 4 || team2Wins == 4) {
                games = 8;
            }
            if (games == 7) {
                out.println();
                out.println("Game " + games + ": #" + lower + " " + awayT
                        + " @ #" + i + " " + homeT);
                out.print(awayT + ": ");
                int team2Score = 0;
                String team2S = in.nextLine();
                team2Score = parser(team2S, in, out);
                out.println();
                out.print(homeT + ": ");
                int team1Score = 0;
                String team1S = in.nextLine();
                team1Score = parser(team1S, in, out);

                while (team2Score == team1Score) {
                    out.println("Cannot end in tie");
                    out.println("Game " + games + ": #" + lower + " " + awayT
                            + " @ #" + i + " " + homeT);
                    out.print(awayT + ": ");
                    team2S = in.nextLine();
                    team2Score = parser(team2S, in, out);
                    out.println();
                    out.print(homeT + ": ");
                    team1S = in.nextLine();
                    team1Score = parser(team1S, in, out);
                }
                if (team2Score > team1Score) {
                    team2Wins++;
                } else if (team1Score > team2Score) {
                    team1Wins++;
                }
                out.println();
                out.println(homeT + " " + team1Wins);
                out.println(awayT + " " + team2Wins);
                games++;

            }
        }
        if (team1Wins == 4) {
            out.println(homeT + " wins " + team1Wins + "-" + team2Wins);
            return i;

        } else {
            out.println(awayT + " wins " + team2Wins + "-" + team1Wins);
            return lower;

        }

    }

    public static ArrayList<Integer> FirstR(Map<Integer, String> seeds,
            SimpleReader in, SimpleWriter out, String conf) {
        ArrayList<Integer> winningSeeds = new ArrayList<Integer>();
        out.println(conf + " conference FIRST ROUND");
        for (int i = 1; i <= 4; i++) {
            String team1 = seeds.value(i);
            int lower = 9 - i;
            String team2 = seeds.value(lower);
            int winning = series(i, lower, team1, team2, out, in);

            winningSeeds.add(0, winning);

            out.println();
        }
        return winningSeeds;
    }

    public static ArrayList<Integer> SecondR(ArrayList<Integer> firstR,
            Map<Integer, String> seeds, SimpleReader in, SimpleWriter out,
            String conf) {
        ArrayList<Integer> winningSeeds = new ArrayList<Integer>();
        out.println(conf + " conference SECOND ROUND");
        for (int i = 0; i <= 1; i++) {
            int temp1 = firstR.get(i);
            int temp2 = firstR.get(3 - i);
            int t1;
            int t2;
            if (temp1 < temp2) {
                t1 = temp1;
                t2 = temp2;
            } else {
                t1 = temp2;
                t2 = temp1;
            }
            String team1 = seeds.value(t1);
            String team2 = seeds.value(t2);

            int winning = series(t1, t2, team1, team2, out, in);
            winningSeeds.add(0, winning);

            out.println();

        }

        return winningSeeds;
    }

    public static String Cfinals(ArrayList<Integer> secondR,
            Map<Integer, String> seeds, SimpleReader in, SimpleWriter out,
            String conf) {
        out.println(conf + " conference FINALS");
        int temp1 = secondR.get(0);
        int temp2 = secondR.get(1);
        int t1;
        int t2;
        if (temp1 < temp2) {
            t1 = temp1;
            t2 = temp2;
        } else {
            t1 = temp2;
            t2 = temp1;
        }
        String team1 = seeds.value(t1);
        String team2 = seeds.value(t2);

        int winning = series(t1, t2, team1, team2, out, in);

        return seeds.value(winning);

    }

    public static void Finals(String team1, String team2, SimpleReader in,
            SimpleWriter out) {
        out.println("NBA FINALS");

        series(0, 0, team1, team2, out, in);

    }

    public static void main(String[] args) {
        SimpleReader in = new SimpleReader1L();
        SimpleWriter out = new SimpleWriter1L();
        Map<Integer, String> westFR = new Map1L<>();
        Map<Integer, String> eastFR = new Map1L<>();
        out.println("Welcome to the NBA Playoff Simulator.");
        out.println(
                "Press 1 to choose the Western Conference teams in the playoffs. Press any other key to automatically have the playoffs set");
        String inp = in.nextLine();
        if (inp.equals("1")) {
            out.println("WESTERN CONFERENCE");
            westFR = chooseWestSeeds(westTeams(), in, out);
        } else {
            westFR = autoWestSeeds(westTeams());
        }

        out.println(
                "Press 1 to choose the Eastern Conference teams in the playoffs. Press any other key to automatically have the playoffs set");
        String inp2 = in.nextLine();
        if (inp2.equals("1")) {
            out.println("EASTERN CONFERENCE");
            eastFR = chooseEastSeeds(eastTeams(), in, out);
        } else {
            eastFR = autoEastSeeds(eastTeams());
        }
        out.println();

        ArrayList<Integer> WCSF = FirstR(westFR, in, out, "Western");
        ArrayList<Integer> ECSF = FirstR(eastFR, in, out, "Eastern");
        //Collections.sort(WCSF);
        //Collections.sort(ECSF);
        out.println("Western Conference Second Round teams: ");
        for (int a = 0; a < WCSF.size(); a++) {
            out.println("#" + WCSF.get(a) + " " + westFR.value(WCSF.get(a)));
        }

        out.println("Eastern Conference Second Round teams: ");
        for (int a = 0; a < ECSF.size(); a++) {
            out.println("#" + ECSF.get(a) + " " + eastFR.value(ECSF.get(a)));
        }

        out.println();
        out.println();

        //CSF
        // 1 or 8 plays 4 or 5
        // 2 or 7 plays 3 or 6

        ArrayList<Integer> WCF = SecondR(WCSF, westFR, in, out, "Western");
        ArrayList<Integer> ECF = SecondR(ECSF, eastFR, in, out, "Eastern");

        out.println("Western Conference Finals teams: ");
        for (int a = 0; a < WCF.size(); a++) {
            out.println("#" + WCF.get(a) + " " + westFR.value(WCF.get(a)));
        }

        out.println("Eastern Conference Second Round teams: ");
        for (int a = 0; a < ECF.size(); a++) {
            out.println("#" + ECF.get(a) + " " + eastFR.value(ECF.get(a)));
        }

        String westFinalsTeam = Cfinals(WCF, westFR, in, out, "Western");
        String eastFinalsTeam = Cfinals(ECF, eastFR, in, out, "Eastern");

        out.println();
        int westFinal = westFR.key(westFinalsTeam);
        int eastFinal = eastFR.key(eastFinalsTeam);
        out.println("NBA Finals teams:");
        out.println("#" + westFinal + " " + westFinalsTeam + " vs. #"
                + eastFinal + " " + eastFinalsTeam);

        String team1;
        String team2;

        if (eastFinal > westFinal) {
            team1 = eastFinalsTeam;
            team2 = westFinalsTeam;
        } else {
            team2 = eastFinalsTeam;
            team1 = westFinalsTeam;
        }

        Map<Integer, String> totalTeams = new Map1L<>();

        Finals(team1, team2, in, out);

        in.close();
        out.close();
    }

}
